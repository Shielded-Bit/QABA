# Generated by Django 5.1.6 on 2025-03-10 23:10

from django.db import migrations, models


def normalize_features_amenities(apps, schema_editor):
    """
    Normalize the features_amenities field for all existing properties.
    Ensures all features have boolean values and removes invalid features.
    """
    Property = apps.get_model("properties", "Property")

    # Get all valid feature keys from the model
    # Since we can't access the model's choices directly in a migration,
    # we'll hardcode the valid features
    valid_features = [
        "PARKING",
        "POOL",
        "GYM",
        "SECURITY",
        "WIFI",
        "AC",
        "FURNISHED",
        "PET_FRIENDLY",
        "BALCONY",
        "GARDEN",
        "ELEVATOR",
        "WASHER",
    ]

    for prop in Property.objects.all():
        if not prop.features_amenities:
            prop.features_amenities = {}

        # Create a new normalized dictionary
        normalized = {}

        # Process existing features
        for key, value in prop.features_amenities.items():
            if key in valid_features:
                normalized[key] = bool(value)

        # Update the property
        prop.features_amenities = normalized
        prop.save()


class Migration(migrations.Migration):

    dependencies = [
        ("properties", "0002_initial"),
    ]

    operations = [
        migrations.AlterField(
            model_name="property",
            name="features_amenities",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text="JSON field storing feature/amenity availability",
            ),
        ),
        migrations.RunPython(normalize_features_amenities, migrations.RunPython.noop),
    ]
